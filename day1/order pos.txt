Let's break down what happens in your code and pinpoint the issue:

---

### **Flow of Operations**

1. **User Clicks "Pay Now"**  
   The `click` event triggers an asynchronous function that:
   - Gathers the order data (cart items and total).
   - Sends a POST request to your Flask API endpoint.

2. **API Response Handling**  
   If the response is successful:
   - An alert is shown.
   - The order list is **cleared** by resetting `array_list_item` and `total_prices`, followed by a UI update via `updateList()`.

3. **Print Logic Execution**  
   After the API call and clearing the order 
   list, your code gathers the HTML content of the order list and total display 
   to build a print template. Then it replaces the page content with this receipt and calls `window.print()`.

---

### **The Problem**

**The issue is that you clear the order list before capturing the data for printing.**

- **What Happens:**  
  Since you clear `array_list_item` and reset `total_prices` before you build your 
  print content, the `<ul id="itemList">` and `<p id="displayValue">` are empty (or show zero total) by the time you try to print.
  
- **Result:**  
  Your printed receipt ends up being empty or incorrect because it doesn't contain the order details that were just processed.

---

### **How to Fix It**

To ensure that the receipt prints the correct order information, you need to capture the order data for printing **before** you clear the order list. Here are two possible solutions:

---

#### **Solution 1: Capture the Print Data First**

Capture the receipt content before clearing the cart data:

```javascript
document.querySelector("#btnPrint").addEventListener("click", async () => {
    // Prepare order data
    const orderData = {
        items: array_list_item,
        total: total_prices
    };

    try {
        const response = await fetch("http://127.0.0.1:5000/buy/item/list/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(orderData)
        });

        const result = await response.json();
        console.log("Server Response:", result);

        if (response.ok) {
            alert("✅ Order successfully placed!");
        } else {
            alert("⚠️ Failed to process order.");
            return; // Stop further execution if failed.
        }
    } catch (error) {
        console.error("Error:", error);
        alert("❌ Server error! Please try again.");
        return;
    }

    // Capture the current order content for printing BEFORE clearing
    const itemListContent = document.querySelector("#itemList").innerHTML;
    const totalValueContent = document.querySelector("#displayValue").outerHTML;

    // CLEAR ORDER LIST MANUALLY AFTER capturing the print data
    array_list_item = [];  // Reset array
    total_prices = 0;      // Reset total price
    updateList();          // Update UI

    // Continue with the print logic using the captured content
    const printContent = `
        <div>
            <h2>Order Receipt</h2>
            <ul>${itemListContent}</ul>
            <hr>
            ${totalValueContent}
        </div>
    `;

    const originalContent = document.body.innerHTML;
    document.body.innerHTML = printContent;
    window.print();
    document.body.innerHTML = originalContent;
});
```

---

#### **Solution 2: Reorder Operations**

Alternatively, you can execute the print logic **first** and then clear the order list once printing is completed. This way, the printed receipt reflects the order before it's cleared:

```javascript
document.querySelector("#btnPrint").addEventListener("click", async () => {
    // Prepare order data
    const orderData = {
        items: array_list_item,
        total: total_prices
    };

    // Capture the current order content for printing BEFORE clearing
    const itemListContent = document.querySelector("#itemList").innerHTML;
    const totalValueContent = document.querySelector("#displayValue").outerHTML;

    // Continue with the print logic using the captured content
    const printContent = `
        <div>
            <h2>Order Receipt</h2>
            <ul>${itemListContent}</ul>
            <hr>
            ${totalValueContent}
        </div>
    `;
    
    const originalContent = document.body.innerHTML;
    document.body.innerHTML = printContent;
    window.print();
    document.body.innerHTML = originalContent;
    
    try {
        const response = await fetch("http://127.0.0.1:5000/buy/item/list/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(orderData)
        });
    
        const result = await response.json();
        console.log("Server Response:", result);
    
        if (response.ok) {
            alert("✅ Order successfully placed!");
    
            // CLEAR ORDER LIST MANUALLY AFTER printing
            array_list_item = [];  // Reset array
            total_prices = 0;      // Reset total price
            updateList();          // Update UI
        } else {
            alert("⚠️ Failed to process order.");
        }
    } catch (error) {
        console.error("Error:", error);
        alert("❌ Server error! Please try again.");
    }
});
```

---

### **Summary**

- **Problem:**  
  The order list is cleared **before** printing, causing the printed receipt to show no items or total.

- **Solution:**  
  **Capture the receipt content** (or execute print logic) **before** clearing the order list and total price.

Choose the solution that best fits your workflow. This will ensure your printed receipt reflects the actual order that was just placed.